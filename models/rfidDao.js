var mysql = require('mysql');var lib = require('../config/lib.js');
//使用链接池,提升性能var pool = lib.getPool();
var msg = function(code, msg, data){    this.code = code;    this.msg = JSON.stringify(msg);    this.data = data;};
function sleep(milliSeconds) {    var startTime = new Date().getTime();    while (new Date().getTime() < startTime + milliSeconds);  }
function connectdb(){ /*var connection = mysql.createConnection({              host : MYSQL_HOST,              user : MYSQL_USER,              password :MYSQL_PASS              host : MYSQL_HOST,              user : MYSQL_USER,              password :MYSQL_PASS  });*/var connection=mysql.createConnection({               host : MYSQL_HOST,               user : 'root',               password :'asb#1234',               database:'RFID_DB'   });var ret=connection.connect();if(ret){ console.log("connect mysql return "+ret);    console.log("connect to DB failed, please check if DB is oK");
    return -1;}    console.log("connect mysql return "+ret);    console.log("connected to DB");    //create the database RFID_DB/*    var sql = 'CREATE DATABASE RFID_DB IF NOT EXISTS';
    console.log("try to create the RFID_DB");    connection.query(sql);
        console.log("created the RFID_DB"); */       var sql = "CREATE TABLE  IF NOT EXISTS rfid_inventory(" +          "rfid_index INT UNSIGNED AUTO_INCREMENT," +           "rfid_epcid VARCHAR(30)," +           "asset_num VARCHAR(30)," +           "rfid_tid  VARCHAR(30)," +           "label_type VARCHAR(1)," +           "epcid_status VARCHAR(10)," +           "location_epcid VARCHAR(30)," +           "gen_time  VARCHAR(30)," +           "install_time VARCHAR(30)," +           "obsolete_time VARCHAR(30)," +           "last_location_time VARCHAR(30)," +           "installed_account VARCHAR(30)," +           "installed_tem_id VARCHAR(30)," +           "last_operation_account VARCHAR(30)," +           "PRIMARY KEY ( rfid_index )" +               ")ENGINE=InnoDB DEFAULT CHARSET=utf8";               connection.query(sql);    console.log("create rfid_inventory"); console.log(sql);    sql = "CREATE TABLE  IF NOT EXISTS epcid_info(" +          "prefix VARCHAR(7)," +          "tail  INT UNSIGNED" +          ")ENGINE=InnoDB DEFAULT CHARSET=utf8";    connection.query(sql);        connection.end();    /*    pool.getConnection(function(err,conn){        if(err)    {        console.log("getConnection failed"+err);        return -1;      }    else    {           var sql = "CREATE TABLE  IF NOT EXISTS 'rfid_inventory'(" +          "'index' INT UNSIGNED AUTO_INCREMENT," +           "'rfid_epcid' VARCHAR(30)," +           "'asset_num' VARCHAR(30)," +           "'rfid_tid'  VARCHAR(30)," +           "'label_type' VARCHAR(1)," +           "'epcid_status' VARCHAR(10)," +           "'location_epcid' VARCHAR(30)," +           "'gen_time'  VARCHAR(30)," +           "'install_time' VARCHAR(30)," +           "'obsolete_time' VARCHAR(30)," +           "'last_location_time' VARCHAR(30)," +           "'installed_account' VARCHAR(30)," +           "'installed_tem_id' VARCHAR(30)," +           "'last_operation_account' VARCHAR(30)," +           "PRIMARY KEY ( `rfid_epcid` )" +               ")ENGINE=InnoDB DEFAULT CHARSET=utf8";                   conn.query(sql,function(err, rows){             if(err)             {                                                    console.log("create rfid_inventory error");                 conn.release();                 return -1;             }             console.log("create rfid_inventory table");             conn.release();         });     }  });*/     return 0;
}
function create_rfid_table(){   var sql = "CREATE TABLE  IF NOT EXISTS rfid_inventory(" +          "rfid_index INT UNSIGNED AUTO_INCREMENT," +           "rfid_epcid VARCHAR(30)," +           "asset_num VARCHAR(30)," +           "rfid_tid  VARCHAR(30)," +           "label_type VARCHAR(1)," +           "epcid_status VARCHAR(10)," +           "location_epcid VARCHAR(30)," +           "gen_time  VARCHAR(30)," +           "install_time VARCHAR(30)," +           "obsolete_time VARCHAR(30)," +           "last_location_time VARCHAR(30)," +           "installed_account VARCHAR(30)," +           "installed_tem_id VARCHAR(30)," +           "last_operation_account VARCHAR(30)," +           "PRIMARY KEY ( rfid_index )" +               ")ENGINE=InnoDB DEFAULT CHARSET=utf8";            pool.getConnection(function(err,conn){        if(err)      {              console.log("getConnection failed"+err);           //callback(err,null,null);        }              else      {            conn.query(sql,function(err, rows){               if(err)               {                                                      console.log("create rfid_inventory error");                   conn.release();                   return -1;               }               console.log("create rfid_inventory table");                              conn.release();            });        }    });}
function query(req, callback){ var data = []; console.log('rfidDao sql js');    pool.getConnection(function(err, connection) {        if(err) {            data.type = "fail";            data.message = "connect fail";            data.err = err;            callback(data);            return;  }
        var epcid = req.body.epcid||'';        var start = parseInt(req.body.start);        var length = parseInt(req.body.length);        //var epcsql ='where epcid_status='+connection.escape("INSTALLED") + 'and rfid_epcid like "%'+epcid+'%" or epcid_status='+connection.escape("OBSOLETE");  var epcsql = 'where rfid_epcid like "%'+epcid+'%" ';  connection.query('select * from rfid_inventory left join rfid_location on rfid_inventory.location_epcid = rfid_location.rfid_location_epcid '+ epcsql +'limit ?,?',[start,length], function(err,result){            if (err) {                data.type = "fail";                data.message = "select fail";                data.err = err;                callback(data);            } else {            connection.query('select count(1) from rfid_inventory '+ epcsql +'',[], function(err,result2){                data.type = "success";                data.message = "success";                data.err = '';                data.count = result2[0]['count(1)'];                data.data = result;                callback(data);            }); }            connection.release();        });    });
}
function update(rfid, callback){    pool.getConnection(function(err,conn){        if(err)      {              console.log("getConnection failed"+err);           conn.release();           return;      }              else      {          console.log(rfid);          var rfid_index = rfid['rfid_index'];                    //var epcid=rfid['rfid_epcid'];         console.log(rfid_index);                  var sql = "select * from  rfid_inventory WHERE rfid_index = ?" ;
          conn.query(sql,[rfid_index],function (err, rows, fields){             if(err)             {                console.log(err);                conn.release();               return;            }            if(rows.length == 0)            {                console.log(rfid_index+ " not found");                conn.release();               return;             }                                           sql = "update rfid_inventory set ";                                    var start=0;               for(var key in rfid)               {                   if(start ==1)                   {                      sql +=",";                   }                   if(key == "rfid_index")                   continue;                   sql = sql+key;                   sql += "=\'" + rfid[key] + "\'";                   start = 1;                }                                       sql += " where rfid_index=" +rfid_index;               console.log(sql);             conn.query(sql,function (err, rows, fields){                 if(err)                 {                   console.log(err);                }                conn.release();                callback(err);                return;                          });                    });        }            });} 
function insert(rfid, callback){ pool.getConnection(function(err, conn) {  if (err)  {   console.log("getConnection failed " + err);   conn.release();   callback(err);   return;  }
  sql = "INSERT INTO rfid_inventory(rfid_epcid, label_type,epcid_status) VALUES (?,?,?)";  conn.query(sql,[rfid.rfid_epcid, rfid.label_type,  rfid.epcid_status], function(err, result) {   if (err) {    console.log(err, result);    callback(err);   }   else if (rfid.label_type == "Z") {    console.log('insert into location: ' + rfid.label_type);    sql = "INSERT INTO rfid_location(rfid_location_epcid) VALUES (?)";    conn.query(sql,[rfid.rfid_epcid], function(err, result) {     if (err) {      console.log(err, result);      return;     }     conn.release();     callback(err);    });    return;   }   else if (rfid.label_type == "E") {    callback(err);   }   conn.release();  }); });} 
function remove(rfid, callback){    pool.getConnection(function(err,conn){        if(err)      {             console.log("getConnection failed"+err);          //callback(err,null,null);        }              else      {          console.log(rfid);                            var sql = "delete from rfid_inventory WHERE " ;            for(var key in rfid)            {             sql += key + " = \'"+rfid[key]+"\'";             break;            }            console.log(sql);          conn.query(sql,function (err, rows, fields){             if(err)             {                console.log(err);                conn.release();               return;            }                       });                                  }          conn.release();          });} 
function search(rfid, callback){    pool.getConnection(function(err,conn){        if(err)      {             console.log("getConnection failed"+err);          conn.release();          return;      }              else      {          //console.log(rfid);          var sql = "select * from rfid_inventory WHERE " ;            for(var key in rfid)            {             sql += key + " = \'"+rfid[key]+"\'";             break;            }            //console.log(sql);          conn.query(sql,function (err, result){             if(err)             {                console.log(err);                conn.release();               return;            }                        //console.log(result);             //console.log("finished search");            conn.release();            callback(err,result);                       });                                         }   });} 
function get_epcid_info(prefix){   var tail;   pool.getConnection(function(err,conn){        if(err)      {             console.log("getConnection failed"+err);          tail= -1;          //callback(err,null,null);        }              else      {                          var sql = "select * from epcid_info WHERE prefix=?" ;         conn.query(sql,[prefix],function (err, rows, fields){         if(err)         {                   console.log(err);           tail= -1;        }                if(rows.length != 0)        {            console.log(prefix + " found");            tail = rows[0].tail;                     }        else        {                     tail=0        }                console.log(tail);      });    }    conn.release();   });      //console.log(tail);      sleep(10000);   console.log(tail);   return tail;}
function update_epcid_info(prefix, number){   pool.getConnection(function(err,conn){        if(err)      {             console.log("getConnection failed"+err);      }              else      {                           sql = "update ecpid_info set tail=? where prefix=?";      conn.query(sql,[number, prefix]);    }                   conn.release();      });}
function insert_epcid_info(prefix, number){   pool.getConnection(function(err,conn){        if(err)      {             console.log("getConnection failed"+err);      }              else      {                        sql = "INSERT INTO epcid_info(prefix, tail) VALUES (?,?)";      conn.query(sql,[prfix, number]);    }    conn.release();      });}exports.connect = connectdb;exports.create_tables = create_rfid_table;exports.query = query;exports.update = update;exports.insert = insert;exports.remove = remove;exports.search = search;exports.get_epcid_info = get_epcid_info;exports.insert_epcid_info = insert_epcid_info;exports.update_epcid_info = update_epcid_info;/*exports.update = update;exports.search = search;exports.remove = remove;*/



